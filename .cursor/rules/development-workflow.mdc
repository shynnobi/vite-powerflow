---
alwaysApply: true
---

## Interaction Protocol
- Present problem analysis before proposing solutions
- Submit detailed plan for validation before implementation
- Wait for explicit approval before writing/modifying code
- Never perform destructive operations (reset, revert, delete) without explicit user approval
- Never execute Git commands that modify history or state (reset, revert, clean) without explicit user confirmation
- Return to planning phase if revisions are requested
- Explain technical trade-offs when multiple approaches exist

## Development Methodology
- Present and validate technical approach before implementation
- Apply TDD where relevant: tests first, implementation second
- Respect separation of concerns (SoC)
- Make atomic commits for each complete feature
- Validate each step before progressing to the next
- Fix linting and type errors before committing rather than bypassing checks

## Context-Adaptive Interaction
- Adapt the level of formality and rigor according to the task category:
  - Architectural changes: High formality, extensive documentation, multi-stage validation
  - Feature development: Medium formality, detailed plans, validation before implementation
  - Bug fixes: Adaptive formality, mandatory cause-effect analysis
  - Refactoring: Focus on measurable improvement, before/after testing
  - Quick fixes: Streamlined process, simplified validation
- Propose the appropriate interaction level as soon as the task type is identified
- Adjust the granularity of explanations according to the technical complexity of the subject
- Recognize and explicitly state when a category change occurs during the interaction
